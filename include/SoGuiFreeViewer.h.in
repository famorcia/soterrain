#ifndef SO_QT_FREE_VIEWER_H
#define SO_QT_FREE_VIEWER_H

///////////////////////////////////////////////////////////////////////////////
//  SoTerrain
///////////////////////////////////////////////////////////////////////////////
/// View for free movement in keyboard and piano.
/// \file SoQtFreeViewer.h
/// \author Radek Barton - xbarto33
/// \date 03/06/2006
///
/// View for free movement in keyboard and piano.
/// Display a window with a window that can be moved around with a
/// piano. Myi cursor is captured and hidden by the window, so it is easy to open
/// looking at everyone around. The camera position can be controlled with the following keys:
/// <DL>
/// <DT>W</DT><DD>movement of compartment camera</DD>
/// <DT>S</DT><DD>move camera back</DD>
/// <DT>A</DT><DD>move camera left</DD>
/// <DT>D</DT><DD>move camera right</DD>
/// <DT>Q</DT><DD>move camera up</DD>
/// <DT>E</DT><DD>move camera down</DD>
/// <DT>LEFT</DT><DD>point camera left</DD>
/// <DT>RIGHT</DT><DD>point the camera to the right</DD>
/// <DT>UP</DT><DD>point camera up</DD>
/// <DT>DOWN</DT><DD>turn the camera down</DD>
/// <DT>PGUP</DT><DD>tilt camera left</DD>
/// <DT>PGDOWN</DT><DD>tilt camera right</DD>
/// </DL>
//////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2006 Radek Barton
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
///////////////////////////////////////////////////////////////////////////////

#include <Inventor/SbBasic.h>
#include <Inventor/SbLinear.h>
#include <Inventor/nodes/SoCamera.h>
#include <Inventor/events/SoEvent.h>
#include <Inventor/events/SoLocation2Event.h>
#include <Inventor/events/SoKeyboardEvent.h>
#include <Inventor/events/SoMouseButtonEvent.h>

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/So@Gui@Cursor.h>
#include <Inventor/@Gui@/viewers/So@Gui@Viewer.h>

#include <debug.h>

/** View for free movement in the keyboard and piano.
    Display window with space, in which you can move with a
    piano. Myi cursor is captured and hidden by the window, so it is easy to open
    looking at everyone around. The camera position can be controlled with the following keys:
    <DL>
      <DT>W</DT><DD>movement of compartment camera</DD>
      <DT>S</DT><DD>move camera back</DD>
      <DT>A</DT><DD>move camera left</DD>
      <DT>D</DT><DD>move camera right</DD>
      <DT>Q</DT><DD>move camera up</DD>
      <DT>E</DT><DD>move camera down</DD>
      <DT>LEFT</DT><DD>turn the camera to the left</DD>
      <DT>RIGHT</DT><DD>point the camera to the right</DD>
      <DT>UP</DT><DD>point the camera up</DD>
      <DT>DOWN</DT><DD>shoot the camera down</DD>
      <DT>PGUP</DT><DD>tilt camera left</DD>
      <DT>PGDOWN</DT><DD>tilt camera right</DD>
    </DL>
*/
class So@Gui@FreeViewer : public So@Gui@Viewer
{
  SO@GUI@_OBJECT_HEADER(So@Gui@FreeViewer, So@Gui@Viewer);
  public:
    /** Constructor.
            Create an instance of ::So@Gui@FreeViewer as a child of window \p parent a
            set its internal name to \p name. If not specified
            parameter \p name, the name is determined automatically.
            The parameter \p embed is used to determine whether it should be nested in its parent, or whether it should create its own
            custom shell.
            \param parent Pointer to the parent window.
            \param name The name of the browser.
            \param embed Command to embed the search into its parent.*/
    So@Gui@FreeViewer(@WINWIDGET@ parent = NULL, const char * name = NULL,
      SbBool embed = TRUE);
    /**
Destructor.
    Destroy an instance of ::So@Gui@FreeViewer. */
    ~So@Gui@FreeViewer();
    /** The sensitivity of myi.
            I checked the set sensitivity value.
            \return Sensitivity myi hl  .*/
    float getMouseSensitivity() const;
    /** Adjust myi sensitivity.
            Set the sensitivity of the myi screen to the \p sensitivity value.
            \param sensitivity The new sensitivity value of myi hl  . */
            void setMouseSensitivity(const float sensitivity);
            /** Invert the string.
            The set value of the voltage is inverted and viewed.
            \return P nak inverted myi.*/
    SbBool getInvertMouse() const;
    /** Set the invert switch.
            Set the inverted view switch to \p enabled.
            \param enabled The new value of the inverted command.*/
    void setInvertMouse(const SbBool enabled);
  protected:
    /* Metody. */
    /** Constructor.
            Create an instance of ::So@Gui@FreeViewer as a child of window \p parent a
            set its internal name to \p name. If not specified
            parameter \p name, the name is determined automatically. The parameter \p emdbed is used to determine whether it should be nested in its parent, or whether it should create its own
            custom shell. The \p build parameter is used to capture the initialization order of the browser component.
            \param parent Pointer to the parent window.
            \param name The name of the browser.
            \param embed Command to embed the search into its parent.
            \param build Build the browser window.*/
    So@Gui@FreeViewer(@WINWIDGET@ parent, const char * const name, SbBool embed,
      SbBool build);
    /** General event callback
            Processes the request to handle the view event and returns TRUE
            if the event was serviced. Actually just detect the type
            events and handlers are left with the callback enabled
            \param event Event object.
            \return The event handler.*/
    virtual SbBool processSoEvent(const SoEvent * const event);
    /** Callback event myi movement.
            Processes the movement event of myi view and returns TRUE if it was
            event served.
            \param event Event object.
            \return The event handler. */
    virtual SbBool processSoLocation2Event(const SoLocation2Event * const
      event);
    /** A callback will be made by the piano.
            Processes the view key press event and returns TRUE in case of e
            the event was served.
            \param event Event object.
            \return The event handler.*/
    virtual SbBool processSoKeyboardEvent(const SoKeyboardEvent * const event);
    /** Callback event for pressing the myi button.
            Processes myi hl√• key press event and returns TRUE if so
            that the event was handled.
            \param event Event object.
            \return The event handler.*/
    virtual SbBool processSoMouseButtonEvent(const SoMouseButtonEvent * const
      event);

/* Data items. */
    /// Sensitivity of myi.
        float sensitivity;
    /// Let's invert it.
    SbBool invert;
  private:
    /**
Compound constructor.
    Initializes the view both for private and public
    constructor.
    \param buildNow Build the browser window.*/
    void constructorCommon(SbBool buildNow);
    /** In the middle of the view window.
            Finds the center of the viewport window in pixels relative to the start of the window.
            \return View window center. */
    SbVec2s getCenter() const;
    /** View window position.
            Finds the position of the view window in pixels relative to the parent number
            view window
            \return View window position. */
    SbVec2s getPosition() const;
    /** Set the scan cursor position.
            Set the view cursor position to the value \p absolute position
            the bottom of the screen.
            \param position New position of the scan cursor. */
    void setCursorPosition(const SbVec2s position);
    /** View cursor position.
            The value of the cursor position is searched absolutely from the beginning of the screen.
            \return Cursor view position. */
    SbVec2s getCursorPosition();
};

#endif
